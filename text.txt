XSS Prevention


htmlspecialchars ($_POST['name']); // most used for XSS prevention 
FILTER_SANITIZE_EMAIL - Remove all characters except letters, digits and !#$%&'*+-=?^_`{|}~@.[].
FILTER_SANITIZE_ENCODED - URL-encode string, optionally strip or encode special characters.
FILTER_SANITIZE_NUMBER_FLOAT - Remove all characters except digits, +- and optionally .,eE.
FILTER_SANITIZE_NUMBER_INT - Remove all characters except digits, plus and minus sign.
FILTER_SANITIZE_SPECIAL_CHARS - HTML-escape '"<>& and characters with ASCII value less than 32, 
FILTER_SANITIZE_FULL_SPECIAL_CHARS - Equivalent to calling htmlspecialchars() with ENT_QUOTES set.
FILTER_SANITIZE_STRING - Strip tags, optionally strip or encode special characters.
FILTER_SANITIZE_STRIPPED -Alias of "string" filter.
FILTER_SANITIZE_URL - Remove all characters except letters, digits and $-_.+!*'(),{}|\\^~[]`<>#%";

SQL Injection Prevention
1. MYSQLI
Insecure 
 $title = ($_POST['title']);
Secure 
$title = mysqli_real_escape_string($conn,$_POST['title']);

Use mysqli_real_escape_string to prevent against SQLI

2.PDO 
Insecure 
$Query = $con->query(“SELECT * FROM users WHERE email = ‘email’”)
Secure 
$Query = $con ->prepare (“SELECT * FROM users WHERE email =:email”)
$Query->execute()

Use prepare and execute protect SQLI



